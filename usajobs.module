<?php

/**
 * @file
 * Display all current jobs.
 */

/**
 * Implements hook_block_info().
 */
function usajobs_block_info() {
  $block['usajobs']['info'] = t('USAJobs Listing');
  $block['usajobs']['cache'] = DRUPAL_CACHE_PER_PAGE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function usajobs_block_configure($delta = '') {

  $form = array();
  if ($delta == 'usajobs') {
    $form['usajobs_organization_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Federal agency ID'),
      '#default_value' => variable_get('usajobs_organization_id'),
      '#description' => t('Specifies which federal, state, or local agency to use as a filter.<br /> For federal agencies, the ID is based on <a href="https://schemas.usajobs.gov/Enumerations/AgencySubElement.xml" target="_blank">USAJobs\' agency schema</a>. Two letter codes are used to span entire departments, while four letter codes are generally used for independent agencies or agencies within a department.'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function usajobs_block_save($delta = '', $edit = array()) {
  if ($delta == 'usajobs') {
    variable_set('usajobs_organization_id', $edit['usajobs_organization_id']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays all current opening positions.
 */
function usajobs_block_view($delta = '') {
<<<<<<< HEAD

  $jobs = usajobs_get_data(variable_get('usajobs_organization_id'));

  $items = array();
  if (!empty($jobs)) {

    foreach ($jobs as $job) {

      $item  = '<div class="job-title">';
      $item .= '<a href="' . $job->url . '" target="_blank">' . $job->position_title . '</a>';
      $item .= '</div>';
      $item .= '<div class="job-organization">' . $job->organization_name . '</div>';
      $item .= '<div class="job-location">' . $job->locations[0] . ' - ' . '$' . number_format($job->minimum, 2) . '+' . '</div>';
      $item .= '<div class="job-date">' . 'Apply by ' . format_date(strtotime($job->end_date), 'custom', 'F d, Y') . '</div>';

      $items[] = $item;
    }
  }
  else {
=======
  
  $jobs = usajobs_get_data(variable_get('usajobs_organization_id'));
  
  $items = array();
  if (!empty($jobs)) {

    foreach($jobs as $job) {

      $item  = '<div class="job-title">';
      $item .= '<a href="'. $job->url . '" target="_blank">'. $job->position_title .'</a>';
      $item .= '</div>';
      $item .= '<div class="job-organization">' . $job->organization_name . '</div>';
      $item .= '<div class="job-location">' . $job->locations[0] . ' - ' . '$' . number_format($job->minimum, 2) . '+' . '</div>';
      $item .= '<div class="job-date">' . 'Apply by '.  format_date(strtotime($job->end_date), 'custom', 'F d, Y') . '</div>';

      $items[] = $item;
    }
  }else{
>>>>>>> 7b9b6e71d7a453661d2d7556c884f5493a23faf0
    $items[] = t('No jobs available.');
  }

  $block = array();
<<<<<<< HEAD
  if ($delta == 'usajobs') {
    $block['subject'] = t('Current Oppotunities');
    $block['content'] = theme('item_list', array('items' => $items, 'title' => '', 'type' => 'ul', 'attributes' => array('id' => 'jobs-list')));
  }
=======
   if ($delta == 'usajobs') {
     $block['subject'] = t('Current Oppotunities');
     $block['content'] = theme('item_list', array('items' => $items, 'title'=> '', 'type' => 'ul', 'attributes' => array('id' => 'jobs-list')));

   }
>>>>>>> 7b9b6e71d7a453661d2d7556c884f5493a23faf0

  return $block;
}

/**
 * Retrieve data from USAJobs.
 */
<<<<<<< HEAD
function usajobs_get_data($organization_id) {

  $url = format_string('http://api.usa.gov/jobs/search.json?organization_id=@organization_id', array('@organization_id' => $organization_id));

  // Request data.
  $result = drupal_http_request($url);
  switch ($result->code) {
=======
function usajobs_get_data($organization_id){
  
  $url = format_string('http://api.usa.gov/jobs/search.json?organization_id=@organization_id', array('@organization_id' => $organization_id));

  // Request data.
  $result = drupal_http_request($url);
  switch($result->code) {
>>>>>>> 7b9b6e71d7a453661d2d7556c884f5493a23faf0
    case 200:
    case 301:
    case 302:
    case 304:
    case 307:
      return json_decode($result->data);
      break;
    default:
      drupal_set_message(t('Connection error "%error".', array('%error' => $result->code . ' ' . $result->error)), 'error');
  }

  return;
}